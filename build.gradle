// java 빌드에 필요한 플러그인 설정
plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.11'
	// 의존성 관리 툴 버젼 명시
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.beyond'
// BUILD 된 jar 파일의 버전명
// snapshot : 실험용 버젼
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11';
}

repositories {
	// 의존성을 가지고 오는 대상 저장소(repository)
	//  내부망에서 인터넷을 사용하기 불가한 경우 nexus(설치형)와 같은 repository을 사용하기도 함
	mavenCentral()
}

// starter 종속성은 일반적으로 별도의 버젼관리가 필요없고, 버전에 따라 호환성을 맞춰줌.
dependencies {
	// DB 연결 및 관리를 위한 의존성 : JDBC, mybatis, JPA, springdata JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	// mybatis 관련 의존성 추가
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// mariaDB 의존성 추가
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	// 타임리프(템플릿 엔진 -JSP, 타임리프 등 ) 의존성 주입
	// CSR : 화면과 서버(데이터만) 분리 / SSR : 서버 안에서 화면까지 렌더링(화면 + 데이터)
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	// implementation 키워드는 컴파일 시점과 런타임 시점에 모두 필요한 라이브러리임을 명시
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// compileOnly는 컴파일 시점에서 필요한 라이브러리 임을 명시 -> class 파일을 만들 때 부터 참조하여 사용
	// runTimeOnly : class 파일x , 최종 jar 파일 만들 때에는 포함 *jar : class + 기타의존성묶음 => 실행 가능한 상태 (대표적 DB 관련 의존성)
	compileOnly 'org.projectlombok:lombok'
	// annotationProcessor : compileOnly와 유사
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

tasks.named('test') {
	useJUnitPlatform()
}
